---
description: React project best practices and coding standards
globs: src/**/*.tsx, src/**/*.jsx, src/**/*.ts
priority: 10
---
## Component Standards

- Use PascalCase for component files and component names, keeping them consistent
- Prefer functional components with Hooks
- Use .jsx/.tsx extension for files containing JSX syntax
- Import styles at the bottom of import section
- Use `import type` for type imports
- Avoid default exports for components
- Extract reusable logic into custom hooks
- Keep components focused on a single responsibility

## Directory Structure
src/
├── components/       # Reusable components
├── pages/            # Page components
├── hooks/            # Custom hooks
├── utils/            # Utility functions
├── services/         # API services
├── types/            # TypeScript 类型
├── assets/           # 静态资源
└── styles/           # 样式文件

## Hooks 使用规范

-   自定义 Hook 以 `use` 开头
-   避免在循环/条件语句中使用 Hooks
-   合理使用 useMemo 和 useCallback
-   当出现多组件跨层级传值时考虑使用 useContext 管理状态

## 性能优化

-   合理拆分组件
-   合理使用 React.memo 避免不必要渲染
-   合理使用 React.lazy 实现代码分割

## 状态管理

-   小型项目使用 Context + useReducer
-   大型项目推荐使用 zustand
-   遵循不可变数据原则
-   合理划分 state 结构

## TypeScript 集成

-   为 Props 定义接口
-   使用 FC 类型声明组件
-   避免使用 any
-   合理使用泛型
